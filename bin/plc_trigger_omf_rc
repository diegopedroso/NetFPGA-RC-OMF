#!/usr/bin/env ruby

# Copyright (c) 2013 National ICT Australia Limited (NICTA).
# This software may be used and distributed solely under the terms of the MIT license (License).
# You should find a copy of the License in LICENSE.TXT or at http://opensource.org/licenses/MIT.
# By downloading or using this software you accept the terms and the liability disclaimer in the License.

# This script is intended to be run by the PLE Node Manager:
# 1) after initial slice creation
# 2) after slice renewal
# to fetch the client, root and intermediate certificates for the OMF RC

require 'yaml'

curl="curl -s -m30"

puts "Running OMF PLE trigger script"

raise "Please use Ruby 1.9.3 or higher" if RUBY_VERSION < "1.9.3"
raise "You must run this script as root" unless Process.uid==0
raise "You must switch to gemset 'omf' and install the 'omf_rc' gem" unless system("which install_omf_rc > /dev/null")

def check_cert(file, text)
  raise "Failed to #{text} (#{file})" unless File.exists?(file) and File.size?(file) > 0
end

config_file = "/etc/omf_rc/config.yml"
init_script = "/etc/init.d/omf_rc"
csr = "/tmp/request.csr"
cert_server = "http://srv.mytestbed.net:4567/ple/"

# parse config file
raise "could not find #{config_file}" unless File.exists?(config_file)
config = YAML.load_file(config_file)
host = config[:hostname]
slice = config[:slicename]
raise "could not determine host name" unless host
raise "could not determine slice name" unless slice
root_cert_dir = config[:auth][:root_cert_dir]
entity_cert = config[:auth][:entity_cert]
entity_key = config[:auth][:entity_key]
raise ":root_cert_dir missing in config file" unless root_cert_dir
raise ":entity_cert missing in config file" unless entity_cert
raise "cannot find private key at #{entity_key}" unless File.exists?(entity_key)
Dir.mkdir(root_cert_dir) unless File.directory?(root_cert_dir)

# stop the RC
system "#{init_script} stop" if File.exists?(init_script)
system "sleep 2; pkill -f /bin/omf_rc"

# create CSR
puts "Generating CSR"
system "openssl req -subj /CN=#{slice}%#{host} -new -key #{entity_key} -out #{csr}"
check_cert(csr, "generate CSR")

# fetch client cert
puts "Fetching client cert"
system "#{curl} -F \"csr=@#{csr}\" -F \"slice=#{slice}\" -F \"resource=#{host}\" #{cert_server}resource/cert -o #{entity_cert}"
check_cert(entity_cert, "fetch client cert")

# fetch root cert
puts "Fetching root cert"
root_cert = "#{root_cert_dir}/root.crt"
system "#{curl} #{cert_server}root/cert -o #{root_cert}"
check_cert(root_cert, "fetch root cert")

# fetch intermediate cert
puts "Fetching intermediate cert"
intermediate_cert = "#{root_cert_dir}/intermediate.crt"
system "#{curl} #{cert_server}intermediate/cert -o #{intermediate_cert}"
check_cert(intermediate_cert, "fetch intermediate cert")

# install the init script if it doesn't exist yet
puts "Installing OMF init script"
system "install_omf_rc -i" unless File.exists?(init_script)

# start the RC
system "#{init_script} start"

puts "OMF PLE trigger script operation finished"